services:
  auth-service:
    build:
      context: .
      dockerfile: auth-service/docker/Dockerfile
    env_file: ./auth-service/.env
    container_name: auth-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    networks:
      - app-network
    depends_on:
      db1:
        condition: service_healthy
      mailhog:
        condition: service_started

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - app-network

  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network

  db1:
    image: postgres:17-alpine
    restart: always
    container_name: db1
    env_file: ./auth-service/.env
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    volumes:
      - db1-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  notes-service:
    build:
      context: .
      dockerfile: notes-service/docker/Dockerfile
    env_file: ./notes-service/.env
    container_name: notes-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    networks:
      - app-network
    depends_on:
      db2:
        condition: service_healthy

  db2:
    image: postgres:17-alpine
    restart: always
    container_name: db2
    env_file: ./notes-service/.env
    environment:
      POSTGRES_DB: ${NOTES_DB_NAME}
      POSTGRES_USER: ${NOTES_DB_USER}
      POSTGRES_PASSWORD: ${NOTES_DB_PASSWORD}
    volumes:
      - db2-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db1-data:
  db2-data:
  minio_data:

networks:
  app-network:
    driver: bridge